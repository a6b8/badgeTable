## Methods

Folgende Methoden sind öffentlich aufrufbar. Dabei erstellt `getTable` die eigentliche Tabelle. Alle weiteren Methoden helfen, manuell erstelle Tabellen anzuzeigen.



```
npm init -y
npm i badgetable
```

### .getTable()

Diese Methode gibt eine gewünschte Tabelle aus. Die Form wird über den Parameter `preset` bestimmt. 


**Method**
```.getTable( { preset, projects, sort=true, footer=true, header=false } )```

| Name          | Type    | Default | Description                                         | Required |
| ------------- | ------- | ------- | --------------------------------------------------- | -------- |
| preset        | Any     |         | The preset to use for generating the table.        | `true`   |
| projects      | Any     |         | The projects to include in the table.              | `true`   |
| sort          | Boolean | `true`  | Whether to sort the table.                         | `false`  |
| footer        | Boolean | `true`  | Whether to include a footer in the table.          | `false`  |
| header        | Boolean | `false` | Whether to include a header in the table.          | `false`  |

See [Presets](#presets) for examples.

**Returns**
```String (markdown)```


### .getPresets()

Die Helferemthode gibt als Array of Strings alle verfügbaren `presets` zurück

**Method**
```
getPresets()
```

**Return**
```
Array of Strings
```


### .getConfig()

Diese Methode gibt die gerade aktive configuration zurück. In diesem Object sind auch die jeweiligen Presets abgelegt. Die es bedarf um ein Table zu generieren. Um ein custom table zu erstellen, siehe [.setConfig()](#setconfig).


**Method**
```.getConfig()```

**Returns**
``Òbject```


Retrieve the default configuration after auto-generation. This can be useful if you want to create your custom configuration.


### .setConfig()

Mit dieser Methode wird es ermöglicht die configutration anzupassen um zum Besipiel eine einigenes TEmplate einzufügen. 

> Contribution welcome, gerne erweitern wir die standard presets. Sendet gerne eure Vorschläge.



**Method**
```.setConfig( { config, init=false } ) ```

| Name          | Type    | Default | Description                                         | Required |
| ------------- | ------- | ------- | --------------------------------------------------- | -------- |
| config        | Object     |         | The configuration to set for the function.          | `true`   |
| init          | Boolean | `false` | Do not provide this parameter.           | `false`  |


**Example**
To customize your configuration, you can provide your own config. It is recommended to modify the [default configuration](https://github.com/a6b8/BadgeTable/blob/main/src/data/config.mjs). The configuration distinguishes between `Badges`, `Columns`, and `Presets`. Within `Badges`, each badge is defined using a `struct`. The `wrapperUrl` can be used to create a clickable link, and the `shield` represents the actual badge content. The `struct` expects pseudo-HTML enclosed in "<<" and ">>". Variables within the payload are denoted by "{{" and "}}".

```js
import { BadgeTable } from 'badgetable'
const btg = new BadgeTable( true )

const yourConfig = {}

const myconfig = btg.getConfig()
myconfig['presets']['githubMinimal']['struct'] = [
    [ 'tree__columns__text', 'tree__markdown__alignment__left' ],
    [ 'tree__columns__githubUpdated', 'tree__markdown__alignment__left' ],
    [ 'tree__columns__license', 'tree__markdown__alignment__left' ]
]

const markDown = btg
    .setConfig( yourConfig )
    // .getTable( { 'preset': 'githubMinimal', projects, sort } )

**Returns**
```
Boolean
```

```